// Q2) Write an LLVM pass to print the function trace. The function trace of a
// program is the “list”(order matters) of the functions that were invoked
// during the program execution. For simplicity, assume that all functions are
// user-defined and the only exception is “printf”

#include "llvm/IR/Function.h"
#include "llvm/IR/Module.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"

#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Transforms/IPO/PassManagerBuilder.h"

#include "llvm/IR/DataLayout.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/InstrTypes.h"
#include "llvm/IR/Instructions.h"

#include "llvm/ADT/SmallVector.h"
#include "llvm/IR/GlobalVariable.h"

#include "llvm/IR/IRBuilder.h"

#include <iostream>
using namespace llvm;

namespace {
struct Pass483 : public ModulePass {

  static char ID;
  Pass483() : ModulePass(ID) {}
  virtual bool runOnModule(Module &M);                // when there is a Module
  virtual bool runOnFunction(Function &F, Module &M); // called by runOnModule
  virtual bool runOnBasicBlock(BasicBlock &B,
                               Module &M); // called by runOnFunction

  bool insertAtMainReturn(Module &M); // called anywhere
  bool setup(Module &M);     // called at beginning of runOnModule
  bool teardown(Module &M);  // called at end of runOnModule
};
} // namespace

//////// runOnModule: runs for each module, overrides class builtin
//
bool Pass483::runOnModule(Module &M) {
  bool modified = setup(M);
  for (Function &F : M) {
    modified |= runOnFunction(F, M);
  }
  modified |= teardown(M);
  return modified;
}

//////// runOnFunction: runs for each functions, overrides class builtin
// called by runOnModule
bool Pass483::runOnFunction(Function &F, Module &M) {
  // track if if any modifications made
  bool modified = false;

  if (F.isDeclaration()) {
    errs() << "Continue\n";
    return modified;
  }

  for (BasicBlock &B : F) { // for each block in function
    modified |= runOnBasicBlock(B, M);
  }
  return modified;
}

//////// runOnBasicBlock: runs for each basic block, overrides class builtin
// called by runOnFunction
bool Pass483::runOnBasicBlock(BasicBlock &B, Module &M) {
  // for (Instruction &I : B) { // for each instruction in block
  // }
  return true;
}

//////// runOnMainReturn:
// 
bool Pass483::insertAtMainReturn(Module &M) {
  Function *mainFun = M.getFunction("main");
  if (!mainFun)
    return false;
  for (BasicBlock &B : *mainFun) { // for each block in main
    for (Instruction &I : B) {    // for each instruction in block
      if ((std::string)I.getOpcodeName() == "ret") { // if instruct is return

        IRBuilder<> Builder(M.getContext());
        // Build printf function handle
        std::vector<Type *> FTyArgs;
        FTyArgs.push_back(Type::getInt8PtrTy(
            M.getContext())); // specify the first argument, i8* is the return
                              // type of CreateGlobalStringPtr
        FunctionType *FTy =
            FunctionType::get(Type::getInt32Ty(M.getContext()), FTyArgs,
                              true); // create function type with return type,
                                     // argument types and if const argument
        FunctionCallee printF = M.getOrInsertFunction(
            "printf", FTy); // create function if not extern or defined

        // insert printf at the end of main function, before return function
        Builder.SetInsertPoint(&I);
        auto &functionList = M.getFunctionList(); // gets the list of functions
        // add a printf to the end of every function which prints its name
        for (auto &function : functionList) {
          Value *formatStr =
              Builder.CreateGlobalStringPtr(function.getName().str() + "\n");
          std::vector<Value *> argVec;
          argVec.push_back(formatStr);
          CallInst::Create(printF, argVec, "printf", &I);
        }
      }
    }
  }
  return true;
}

//////// setup:
// called by runOnModule
bool Pass483::setup(Module &M) { return true; }

//////// teardown:
// called at end of runOnModule
bool Pass483::teardown(Module &M) {
  insertAtMainReturn(M);
  return true;
}

char Pass483::ID = 0;
static RegisterPass<Pass483> X("HW", "483 HW3 passes",
                               false /* Only looks at CFG */,
                               false /* Analysis Pass */);
